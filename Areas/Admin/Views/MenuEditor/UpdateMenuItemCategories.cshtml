@model EMatrix.ViewModels.Admin.MenuItemAdminViewModel

<link rel="stylesheet" href="~/css/admin-panel-menu-customization.css" asp-append-version="true"/>

@{
    ViewData["ActiveTab"] = "Menu";
    ViewData["Title"] = "–†–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏—è";
}

<div class="container mt-3">
    <!-- Tabs -->
    @await Html.PartialAsync("_AdminPanelTabsPartial")

    <h2 class="mt-4">–†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –≥—Ä—É–ø–∏ –∏ –ø–æ–¥–≥—Ä—É–ø–∏ –∑–∞ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏—è</h2>
    <hr/>
    <form asp-action="UpdateMenuItemAssignments" method="post">
        <input type="hidden" name="menuItemId" value="@Model.Id"/>

        <div class="content-wrapper update-menu-item">
            <div class="select-section">
                <h4 style="margin-bottom: 32px">–î–æ–±–∞–≤–∏ –Ω–æ–≤–∞ –∞—Å–æ—Ü–∏–∞—Ü–∏—è</h4>
                <div class="form-floating mb-3">
                    <input id="menu-item-title" class="form-control" placeholder="" value="@Model.Name" readonly/>
                    <label for="menu-item-title">–ö–∞—Ç–µ–≥–æ—Ä–∏—è</label>
                </div>
                <div class="form-floating mb-3">
                    <select class="form-select" id="categorySelect">
                        <option value="">-- –ò–∑–±–µ—Ä–∏ –≥—Ä—É–ø–∞ --</option>
                        @foreach (var cat in Model.AvailableCategories)
                        {
                            <option value="@cat.Value">@cat.Value - @cat.Text</option>
                        }
                    </select>
                    <label for="categorySelect">–ì—Ä—É–ø–∏</label>
                </div>
                <div class="form-floating mb-3">
                    <select class="form-select" id="subcategorySelect">
                        <option value="">-- –ò–∑–±–µ—Ä–∏ –ø–æ–¥–≥—Ä—É–ø–∞ --</option>
                        @foreach (var sub in Model.AvailableSubCategories)
                        {
                            <option value="@sub.Value"
                                    data-cat="@sub.Value.Substring(0, 2)">@sub.Value - @sub.Text</option>
                        }
                    </select>
                    <label for="subcategorySelect">–ü–æ–¥–≥—Ä—É–ø–∏</label>
                </div>

                <div class="mt-4 border-top pt-3">
                    <h5>–°—ä–∑–¥–∞–π –≥—Ä—É–ø–∏—Ä–∞–Ω–∞ –ø–æ–¥–≥—Ä—É–ø–∞</h5>
                    <div class="mb-2">
                        <label for="groupNameInput">–ò–º–µ –Ω–∞ –≥—Ä—É–ø–∞:</label>
                        <input type="text" id="groupNameInput" class="form-control" placeholder="–Ω–∞–ø—Ä. –î–ò–û–î–ò –¶–ï–ù–ï–†–û–í–ò"/>
                    </div>

                </div>

                <div class="select-section-buttons flex-wrap">
                    <button type="button" class="btn btn-success" onclick="addGroup()">–î–æ–±–∞–≤–∏ –≥—Ä—É–ø–∞
                    </button>
                    <button type="button" class="btn btn-success" onclick="addSubGroup()">–î–æ–±–∞–≤–∏ –ø–æ–¥–≥—Ä—É–ø–∞
                    </button>
                    <button type="button" class="btn btn-success" onclick="addToGrouped()">–î–æ–±–∞–≤–∏ –ø–æ–¥–≥—Ä—É–ø–∞ –∫—ä–º —Å–µ—Ç</button>
                    <button type="submit" class="btn btn-primary">–ó–∞–ø–∞–∑–∏ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ</button>
                    <a href="@Url.Action("GetMenuManagement")" class="btn btn-secondary">–ù–∞–∑–∞–¥</a>
                </div>
                <fieldset class="border rounded p-3 mb-3 mt-3">
                    <legend>–†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</legend>
                    <ul class="mb-0">
                        <li>–ò–∑–±–µ—Ä–µ—Ç–µ <strong>–≥—Ä—É–ø–∞</strong> –æ—Ç –ø–∞–¥–∞—â–∏—è —Å–ø–∏—Å—ä–∫ –∏ –Ω–∞—Ç–∏—Å–Ω–µ—Ç–µ <em>‚Äû–î–æ–±–∞–≤–∏ –≥—Ä—É–ø–∞‚Äú</em>.</li>
                        <li>–ò–∑–±–µ—Ä–µ—Ç–µ <strong>–ø–æ–¥–≥—Ä—É–ø–∞</strong> –æ—Ç –ø–∞–¥–∞—â–∏—è —Å–ø–∏—Å—ä–∫ –∏ –Ω–∞—Ç–∏—Å–Ω–µ—Ç–µ <em>‚Äû–î–æ–±–∞–≤–∏ –ø–æ–¥–≥—Ä—É–ø–∞‚Äú</em>.
                        </li>
                        <li>–ü—Ä–µ–º–∞—Ö–Ω–µ—Ç–µ –∞—Å–æ—Ü–∏–∞—Ü–∏—è —Å –±—É—Ç–æ–Ω–∞ <strong>–•</strong>.</li>
                        <li>–ù–∞—Ç–∏—Å–Ω–µ—Ç–µ <strong>‚Äû–ó–∞–ø–∞–∑–∏ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ‚Äú</strong>, –∑–∞ –¥–∞ –∑–∞–ø–∏—à–µ—Ç–µ.</li>
                    </ul>
                </fieldset>
            </div>

            <div id="categoriesContainer">
                <h4>–°—ä—â–µ—Å—Ç–≤—É–≤–∞—â–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏</h4>
                <div>
                    <strong>–ì—Ä—É–ø–∏:</strong>
                    <div id="groupsContainer">
                        @foreach (var c in Model.Categories)
                        {
                            <div class="mb-2" data-value="@c.Key">
                                <input type="hidden" name="selectedCategories" value="@c.Key"/>
                                <input type="text" class="form-control d-inline-block w-auto" value="@c.Value"
                                       readonly/>
                                <button type="button" class="btn btn-danger" onclick="removeAssignment(this)">X</button>
                            </div>
                        }
                    </div>
                </div>
                <div>
                    <strong>–ü–æ–¥–≥—Ä—É–ø–∏:</strong>
                    <div id="subGroupsContainer">
                        @foreach (var sc in Model.SubCategories)
                        {
                            <div class="mb-2" data-value="@sc.Key">
                                <input type="hidden" name="selectedSubCategories" value="@sc.Key"/>
                                <input type="text" class="form-control d-inline-block w-auto" value="@sc.Value"
                                       readonly/>
                                <button type="button" class="btn btn-danger" onclick="removeAssignment(this)">X</button>
                            </div>
                        }
                    </div>
                </div>
                <div class="mt-3">
                    <strong>–ì—Ä—É–ø–∏—Ä–∞–Ω–∏ –ø–æ–¥–≥—Ä—É–ø–∏:</strong>
                    <div class="accordion" id="groupedSubGroupsContainer">
                        @foreach (var group in Model.GroupedSubCategories)
                        {
                            var collapseId = $"collapse_{group.Key.GetHashCode()}";
                            <div class="accordion-item grouped-set" data-group-name="@group.Key">
                                <h2 class="accordion-header">
                                    <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#@collapseId" aria-expanded="false" aria-controls="@collapseId">
                                        @group.Key
                                    </button>
                                </h2>
                                <div id="@collapseId" class="accordion-collapse collapse">
                                    <div class="accordion-body">
                                        <ul class="list-group">
                                            @foreach (var sub in group.Value)
                                            {
                                                <li class="list-group-item d-flex justify-content-between align-items-center" data-sub-id="@sub.Key">
                                                    <span>@sub.Key - @sub.Value</span>
                                                    <button type="button" class="btn-close" aria-label="Remove" onclick="removeGrouped('@group.Key', '@sub.Key')"></button>
                                                </li>
                                            }
                                        </ul>
                                    </div>
                                </div>
                            </div>
                        }
                    </div>

                    <input type="hidden" name="groupedSubCategoriesJson" id="groupedSubCategoriesJson" />
                </div>

            </div>
        </div>
    </form>
</div>

@section Scripts {

    <script>
        const groupedData = @Html.Raw(Json.Serialize(Model.GroupedSubCategories));

        // üîÑ Normalize backend dictionary structure into list of DTOs (id + name)
        for (const group in groupedData) {
            if (!Array.isArray(groupedData[group])) {
                groupedData[group] = Object.entries(groupedData[group]).map(([id, name]) => ({
                    id,
                    name
                }));
            }
        }

        function addToGrouped() {
            const groupName = document.getElementById("groupNameInput").value.trim();
            const subSelect = document.getElementById("subcategorySelect");
            const selectedSubId = subSelect.value;
            const selectedSubText = subSelect.options[subSelect.selectedIndex]?.text.split(" - ").slice(1).join(" - ").trim();

            if (!groupName || !selectedSubId) {
                alert("–ú–æ–ª—è –≤—ä–≤–µ–¥–µ—Ç–µ –∏–º–µ –Ω–∞ –≥—Ä—É–ø–∞ –∏ –∏–∑–±–µ—Ä–µ—Ç–µ –ø–æ–¥–≥—Ä—É–ø–∞.");
                return;
            }

            if (!groupedData[groupName]) {
                groupedData[groupName] = [];
            }

            const alreadyExists = groupedData[groupName].some(e => e.id === selectedSubId);
            if (!alreadyExists) {
                groupedData[groupName].push({ id: selectedSubId, name: selectedSubText });
            }

            renderGrouped();
        }

        function removeGrouped(groupName, subId) {
            groupedData[groupName] = groupedData[groupName].filter(e => e.id !== subId);
            if (groupedData[groupName].length === 0) {
                delete groupedData[groupName];
            }
            renderGrouped();
        }

        function renderGrouped() {
            const container = document.getElementById("groupedSubGroupsContainer");
            container.innerHTML = "";

            for (const [groupName, entries] of Object.entries(groupedData)) {
                const collapseId = "collapse_" + groupName.hashCode();

                const header = `<button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#${collapseId}">${groupName}</button>`;

                const listItems = entries.map(entry =>
                    `<li class="list-group-item d-flex justify-content-between align-items-center">
                    ${entry.id} - ${entry.name}
                    <button type="button" class="btn-close" onclick="removeGrouped('${groupName}', '${entry.id}')"></button>
                </li>`
                ).join("");

                container.innerHTML += `
                <div class="accordion-item grouped-set" data-group-name="${groupName}">
                    <h2 class="accordion-header">${header}</h2>
                    <div id="${collapseId}" class="accordion-collapse collapse">
                        <div class="accordion-body">
                            <ul class="list-group">${listItems}</ul>
                        </div>
                    </div>
                </div>
            `;
            }

            updateGroupedJson();
        }

        function updateGroupedJson() {
            document.getElementById("groupedSubCategoriesJson").value = JSON.stringify(groupedData);
        }

        String.prototype.hashCode = function () {
            let hash = 0;
            for (let i = 0; i < this.length; i++) {
                const chr = this.charCodeAt(i);
                hash = ((hash << 5) - hash) + chr;
                hash |= 0;
            }
            return hash;
        };

        // Form submit hook
        document.querySelector("form").addEventListener("submit", () => {
            updateGroupedJson();
        });

        // Initial render
        renderGrouped();
    </script>




    <script>
        document.getElementById("categorySelect").addEventListener("change", function () {
            var selectedPrefix = this.value;
            var subcategorySelect = document.getElementById("subcategorySelect");

            Array.from(subcategorySelect.options).forEach(opt => {
                opt.hidden = opt.value !== "" && !opt.dataset.cat?.startsWith(selectedPrefix);
            });

            subcategorySelect.value = "";
        });
    </script>
    <script>
        function addGroup() {
            let dropdown = document.getElementById("categorySelect");
            let selectedOption = dropdown.options[dropdown.selectedIndex];

            if (!selectedOption || selectedOption.value === "") {
                return; // Skip if no group selected
            }

            let rawText = selectedOption.text;
            let selectedText = rawText.substring(5);
            let selectedValue = selectedOption.value;

            let container = document.getElementById("groupsContainer");

            // Check for duplicates
            if ([...container.children].some(div => div.dataset.value === selectedValue)) {
                return;
            }

            let div = document.createElement('div');
            div.dataset.value = selectedValue;
            div.classList.add('mb-2'); // optional, adds spacing

            div.innerHTML = `
        <input type="hidden" name="selectedCategories" value="${selectedValue}" />
        <input type="text" class="form-control d-inline-block w-auto" value="${selectedText}" readonly />
        <button type="button" class="btn btn-danger" onclick="removeAssignment(this)">X</button>
    `;

            container.appendChild(div);
        }

        function addSubGroup() {
            let dropdown = document.getElementById("subcategorySelect");
            let selectedOption = dropdown.options[dropdown.selectedIndex];

            if (!selectedOption || selectedOption.value === "") {
                return;
            }

            let rawText = selectedOption.text;
            let selectedText = rawText.substring(7); // Trim "XX - "
            let selectedValue = selectedOption.value;

            let container = document.getElementById("subGroupsContainer");

            if ([...container.children].some(div => div.dataset.value === selectedValue)) {
                return;
            }

            let div = document.createElement('div');
            div.classList.add('mb-2');
            div.dataset.value = selectedValue;
            div.innerHTML = `
        <input type="hidden" name="selectedSubCategories" value="${selectedValue}" />
        <input type="text" class="form-control d-inline-block w-auto" value="${selectedText}" readonly />
        <button type="button" class="btn btn-danger" onclick="removeAssignment(this)">X</button>
    `;
            container.appendChild(div);
        }

        function removeAssignment(button) {
            button.parentElement.remove();
        }
    </script>
}