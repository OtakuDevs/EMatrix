@using Microsoft.AspNetCore.Mvc.TagHelpers
@model EMatrix.ViewModels.MenuEditor.MenuItemAdminViewModel

<link rel="stylesheet" href="~/css/admin-panel-menu-customization.css" asp-append-version="true"/>

@{
    ViewData["ActiveTab"] = "Menu";
    ViewData["Title"] = "Редактор категория";
}

<div class="container mt-3">
    @await Html.PartialAsync("_AdminPanelTabsPartial")

    <div class="content-wrapper update-menu-item">
        <div class="update-item-header">
            <h2 class="mt-4">Редактиране на меню категория</h2>
            <hr/>
        </div>
        <div class="update-item-body">
            <!-- Left Controls -->
            <div class="controls-section">
                <form asp-action="UpdateMenuItemAssignments" method="post">
                    <input type="hidden" asp-for="Id"/>

                    <div class="form-floating mb-3">
                        <input asp-for="Name" class="form-control" placeholder="" readonly/>
                        <label asp-for="Name">Име на меню елемент</label>
                    </div>

                    <div class="form-floating mb-3">
                        <select class="form-select" id="categorySelect">
                            <option value="">-- Избери група --</option>
                            @foreach (var cat in Model.AvailableCategories)
                            {
                                <option value="@cat.Value">@cat.Value - @cat.Text</option>
                            }
                        </select>
                        <label for="categorySelect">Групи</label>
                    </div>

                    <div class="form-floating mb-3">
                        <select class="form-select" id="subcategorySelect">
                            <option value="">-- Избери подгрупа --</option>
                            @foreach (var sub in Model.AvailableSubCategories)
                            {
                                <option value="@sub.Value"
                                        data-cat="@sub.Value.Substring(0, 2)">@sub.Value - @sub.Text</option>
                            }
                        </select>
                        <label for="subcategorySelect">Подгрупи</label>
                    </div>

                    <hr/>

                    <div class="mb-3">
                        <label for="optionSelect" class="form-label">Опции</label>
                        <div class="input-group">
                            <select class="form-select" id="optionSelect">
                                <option value="">-- Избери опция --</option>
                                @for (int i = 0; i < Model.Options.Count; i++)
                                {
                                    <option value="@i">@Model.Options[i].Name</option>
                                }
                            </select>
                            <button type="button" class="btn btn-secondary" id="toggleOptionInputBtn"
                                    onclick="toggleAddOptionInput()" title="Добави опция">
                                <i class="bi bi-plus-square" id="toggleOptionIcon"></i>
                            </button>
                        </div>
                    </div>

                    <div class="mb-3 d-none" id="newOptionContainer">
                        <label for="newOptionInput" class="form-label">Име на нова опция</label>
                        <div class="input-group">
                            <input type="text" id="newOptionInput" class="form-control"
                                   placeholder="Име на нова опция"/>
                            <button type="button" class="btn btn-success" id="saveOptionBtn" onclick="addMenuOption()">
                                Запази
                            </button>
                        </div>
                    </div>


                    <div class="form-group mb-3">
                        <button type="button" class="btn btn-secondary" onclick="addSubcategoryToSelectedOption()">
                            Добави подгрупа
                        </button>
                        <button type="button" class="btn btn-secondary" onclick="addSetToSelectedOption()">Добави
                            комплект
                        </button>
                    </div>

                    <button type="submit" class="btn btn-success mt-3">Запази промените</button>
                </form>
            </div>
            <!-- Right Preview -->
            <div class="preview-section">
                <div class="accordion" id="optionsPreview">
                    @for (int i = 0; i < Model.Options.Count; i++)
                    {
                        var option = Model.Options[i];
                        <div class="accordion-item" id="optionPreview_@i">
                            <h2 class="accordion-header" id="heading_@i">
                                <button class="accordion-button" type="button"
                                        data-bs-toggle="collapse" data-bs-target="#collapse_@i"
                                        aria-expanded="false" aria-controls="collapse_@i">
                                    @option.Name
                                </button>
                            </h2>
                            <div id="collapse_@i" class="accordion-collapse collapse"
                                 aria-labelledby="heading_@i" data-bs-parent="#optionsPreview">
                                <div class="accordion-body">
                                    <div class="d-flex justify-content-between align-items-center mb-2">
                                        <strong class="text-primary">Опция: @option.Name</strong>
                                        <button type="button" class="btn btn-outline-danger btn-sm"
                                                onclick="removeOption(@i)">Премахни опцията</button>
                                    </div>

                                    @if (option.Children != null && option.Children.Any())
                                    {
                                        <div class="list-group">
                                            @foreach (var child in option.Children)
                                            {
                                                if (child.Type == "SubGroup")
                                                {
                                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                                        <span><i class="bi bi-arrow-return-right"></i> @child.DisplayName</span>
                                                        <button type="button" class="btn btn-sm btn-outline-danger"
                                                                onclick="removeChild('@i', '@child.ReferenceId')">
                                                            <i class="bi bi-x-circle"></i>
                                                        </button>
                                                    </div>
                                                }
                                                else if (child.Type == "SubGroupSet")
                                                {
                                                    string setId = $"setItems_{i}_{child.DisplayName.Replace(" ", "_")}";
                                                    <div class="list-group-item">
                                                        <div class="d-flex justify-content-between align-items-center">
                                                            <div>
                                                                <i class="bi bi-folder2-open me-1"></i>
                                                                <strong>@child.DisplayName</strong>
                                                            </div>
                                                            <div class="d-flex">
                                                                <button class="btn btn-sm btn-outline-secondary me-2"
                                                                        type="button" data-bs-toggle="collapse"
                                                                        data-bs-target="#@setId" aria-expanded="false"
                                                                        aria-controls="@setId">
                                                                    Покажи/Скрий елементите
                                                                </button>
                                                                <button type="button" class="btn btn-sm btn-outline-danger"
                                                                        onclick="removeSet('@i', '@child.DisplayName')">
                                                                    <i class="bi bi-x-circle"></i>
                                                                </button>
                                                            </div>
                                                        </div>
                                                        <div class="collapse ms-3 mt-2" id="@setId">
                                                            @foreach (var item in child.SubGroupSetItems)
                                                            {
                                                                <div class="d-flex justify-content-between align-items-center mb-1">
                                                                    <span><i class="bi bi-chevron-right"></i> @item.Alias</span>
                                                                    <button type="button" class="btn btn-sm btn-outline-danger"
                                                                            onclick="removeSetItem('@i', '@child.DisplayName', '@item.Id')">
                                                                        <i class="bi bi-x-circle"></i>
                                                                    </button>
                                                                </div>
                                                            }
                                                        </div>
                                                    </div>
                                                }
                                            }
                                        </div>
                                    }
                                    else
                                    {
                                        <div class="text-muted fst-italic">Няма добавени подопции</div>
                                    }
                                </div>
                            </div>
                        </div>
                    }
                </div>
            </div>


        </div>
    </div>
</div>

@section Scripts {
    <script src="~/js/menu-item-update.js" asp-append-version="true"></script>
    <script>

        function addMenuOption() {
            const name = document.getElementById('newOptionInput').value;
            if (!name) return;

            // Add new option logic here (JS + optionally update preview dynamically)
            alert('Нова опция добавена: ' + name);
            document.getElementById('newOptionInput').classList.add('d-none');
            document.getElementById('saveOptionBtn').classList.add('d-none');
            document.getElementById('newOptionInput').value = '';
        }

        function addSubcategoryToSelectedOption() {
            const selectedOptionIdx = document.getElementById('optionSelect').value;
            const subcategorySelect = document.getElementById('subcategorySelect');
            const selectedSub = subcategorySelect.options[subcategorySelect.selectedIndex];
            if (!selectedOptionIdx || !selectedSub.value) return;

            alert(`Добави подгрупа ${selectedSub.text} към опция ${selectedOptionIdx}`);
        }

        function addSetToSelectedOption() {
            const selectedOptionIdx = document.getElementById('optionSelect').value;
            if (!selectedOptionIdx) return;

            const setName = prompt("Въведете име на комплекта:");
            if (!setName) return;

            alert(`Добави комплект '${setName}' към опция ${selectedOptionIdx}`);
        }

        function removeOption(index) {
            alert('Премахване на опция ' + index);
        }

        function removeChild(optionIdx, refId) {
            alert(`Премахване на подгрупа ${refId} от опция ${optionIdx}`);
        }

        function removeSet(optionIdx, setName) {
            alert(`Премахване на комплект '${setName}' от опция ${optionIdx}`);
        }

        function removeSetItem(optionIdx, setName, itemId) {
            alert(`Премахване на елемент ${itemId} от комплект '${setName}' в опция ${optionIdx}`);
        }

        document.getElementById("categorySelect").addEventListener("change", function () {
            var selectedPrefix = this.value;
            var subcategorySelect = document.getElementById("subcategorySelect");

            Array.from(subcategorySelect.options).forEach(opt => {
                opt.hidden = opt.value !== "" && !opt.dataset.cat?.startsWith(selectedPrefix);
            });

            subcategorySelect.value = "";
        });
    </script>
}
