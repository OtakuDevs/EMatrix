@using Microsoft.AspNetCore.Mvc.TagHelpers
@model EMatrix.ViewModels.MenuEditor.MenuItemAdminViewModel

<link rel="stylesheet" href="~/css/admin-panel-menu-customization.css" asp-append-version="true"/>

@{
    ViewData["ActiveTab"] = "Menu";
    ViewData["Title"] = "–†–µ–¥–∞–∫—Ç–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏—è";
}

<div class="container mt-3">
    @await Html.PartialAsync("_AdminPanelTabsPartial")

    <div class="content-wrapper update-menu-item">
        <div class="update-item-header">
            <h2 class="mt-4">–†–µ–¥–∞–∫—Ç–∏—Ä–∞–Ω–µ –Ω–∞ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏—è</h2>
            <hr/>
        </div>
        <form asp-action="UpdateMenuItemAssignments" method="post">
            <div class="update-item-body">
                <!-- Left Controls -->
                <div class="controls-section">

                    <input type="hidden" asp-for="Id"/>

                    <div class="form-floating mb-3">
                        <input asp-for="Name" class="form-control" placeholder="" readonly/>
                        <label asp-for="Name">–ò–º–µ –Ω–∞ –º–µ–Ω—é –µ–ª–µ–º–µ–Ω—Ç</label>
                    </div>

                    <div class="form-floating mb-3">
                        <select class="form-select" id="categorySelect">
                            <option value="">-- –ò–∑–±–µ—Ä–∏ –≥—Ä—É–ø–∞ --</option>
                            @foreach (var cat in Model.AvailableCategories)
                            {
                                <option value="@cat.Value">@cat.Value - @cat.Text</option>
                            }
                        </select>
                        <label for="categorySelect">–ì—Ä—É–ø–∏</label>
                    </div>

                    <div class="form-floating mb-3">
                        <select class="form-select" id="subcategorySelect">
                            <option value="">-- –ò–∑–±–µ—Ä–∏ –ø–æ–¥–≥—Ä—É–ø–∞ --</option>
                            @foreach (var sub in Model.AvailableSubCategories)
                            {
                                <option value="@sub.Value"
                                        data-cat="@sub.Value.Substring(0, 2)">@sub.Value - @sub.Text</option>
                            }
                        </select>
                        <label for="subcategorySelect">–ü–æ–¥–≥—Ä—É–ø–∏</label>
                    </div>

                    <hr/>

                    <div class="mb-3">
                        <label for="optionSelect" class="form-label">–û–ø—Ü–∏–∏</label>
                        <div class="input-group">
                            <select class="form-select" id="optionSelect">
                                <option value="">-- –ò–∑–±–µ—Ä–∏ –æ–ø—Ü–∏—è --</option>
                                @for (int i = 0; i < Model.Options.Count; i++)
                                {
                                    <option value="@i">@Model.Options[i].Name</option>
                                }
                            </select>
                            <button type="button" class="btn btn-secondary" id="toggleOptionInputBtn"
                                    onclick="toggleAddOptionInput()" title="–î–æ–±–∞–≤–∏ –æ–ø—Ü–∏—è">
                                <i class="bi bi-plus-square" id="toggleOptionIcon"></i>
                            </button>
                        </div>
                    </div>

                    <div class="mb-3 d-none" id="newOptionContainer">
                        <label for="newOptionInput" class="form-label">–ò–º–µ –Ω–∞ –Ω–æ–≤–∞ –æ–ø—Ü–∏—è</label>
                        <div class="input-group">
                            <input type="text" id="newOptionInput" class="form-control"
                                   placeholder="–ò–º–µ –Ω–∞ –Ω–æ–≤–∞ –æ–ø—Ü–∏—è"/>
                            <input type="text" id="newOptionOrder" class="form-control"
                                   placeholder="–ü–æ–∑–∏—Ü–∏—è"/>
                            <button type="button" class="btn btn-success" id="saveOptionBtn" onclick="addMenuOption()">
                                –ó–∞–ø–∞–∑–∏
                            </button>
                        </div>
                    </div>


                    <div class="form-group mb-3">
                        <button type="button" class="btn btn-secondary" onclick="addSubcategoryToSelectedOption()">
                            –î–æ–±–∞–≤–∏ –ø–æ–¥–≥—Ä—É–ø–∞
                        </button>
                        <button type="button" class="btn btn-secondary" id="toggleOptionSetInputBtn" onclick="toggleAddOptionSetInput()">–î–æ–±–∞–≤–∏
                            –∫–æ–º–ø–ª–µ–∫—Ç
                        </button>
                    </div>
                    <div class="mb-3 d-none" id="newSetContainer">
                        <label for="newOptionInput" class="form-label">–ò–º–µ –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç</label>
                        <div class="input-group">
                            <input type="text" id="newSetInput" class="form-control"
                                   placeholder="–ò–º–µ –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç"/>
                            <button type="button" class="btn btn-success" id="saveSetBtn" onclick="addMenuOptionSet()">
                                –ó–∞–ø–∞–∑–∏
                            </button>
                        </div>
                    </div>

                    <button type="submit" class="btn btn-success mt-3">–ó–∞–ø–∞–∑–∏ –ø—Ä–æ–º–µ–Ω–∏—Ç–µ</button>

                </div>
                <!-- Right Preview -->
                <div class="preview-section">
                    <ul class="menu-list">
                        @if (!Model.Options.Any())
                        {
                            <p id="no-options" class="text-muted fst-italic">–ù—è–º–∞ –¥–æ–±–∞–≤–µ–Ω–∏ –æ–ø—Ü–∏–∏</p>
                        }
                        else
                        {
                            for (int i = 0; i < Model.Options.Count; i++)
                            {
                                var option = Model.Options[i];

                                <li>
                                    <details>
                                        <summary><strong>üìÅ @option.Name - @option.Order</strong></summary>
                                        <input type="hidden" asp-for="Options[i].Id"/>
                                        <input type="hidden" asp-for="Options[i].Name"/>
                                        <input type="hidden" asp-for="Options[i].Order"/>

                                        @if (option.Children != null && option.Children.Any())
                                        {
                                            <ul class="child-list">
                                                @for (int j = 0; j < option.Children.Count; j++)
                                                {
                                                    var child = option.Children[j];

                                                    @if (child.Type == "SubGroup")
                                                    {
                                                        <li class="list-group-item">
                                                            <span>üìå @child.DisplayName</span>
                                                            <input type="hidden" asp-for="Options[i].Children[j].Id"/>
                                                            <input type="hidden" asp-for="Options[i].Children[j].ReferenceId"/>
                                                            <input type="hidden" asp-for="Options[i].Children[j].DisplayName"/>
                                                            <input type="hidden" asp-for="Options[i].Children[j].Type"/>
                                                        </li>
                                                    }
                                                    else if (child.Type == "SubGroupSet" && child.SubGroupSetItems != null)
                                                    {
                                                        <details>
                                                            <summary>
                                                                <strong>üìÇ @child.DisplayName</strong>
                                                                <button type="button" class="btn btn-sm btn-outline-primary mt-2" onclick="addSubgroupToThisSet(this)">–î–æ–±–∞–≤–∏ –≤ —Å–µ—Ç–∞</button>
                                                            </summary>
                                                            <ul class="set-list">
                                                                @for (int k = 0; k < child.SubGroupSetItems.Count; k++)
                                                                {
                                                                    var setItem = child.SubGroupSetItems[k];

                                                                    <li>
                                                                        <span>üîπ @setItem.Alias</span>
                                                                        <input type="hidden"
                                                                               asp-for="Options[i].Children[j].SubGroupSetItems[k].Id"/>
                                                                        <input type="hidden"
                                                                               asp-for="Options[i].Children[j].SubGroupSetItems[k].Alias"/>
                                                                    </li>
                                                                }
                                                            </ul>
                                                        </details>
                                                    }
                                                }
                                            </ul>
                                        }
                                        else
                                        {
                                            <p id="no-option-children-@i" class="text-muted fst-italic">–ù—è–º–∞ –¥–æ–±–∞–≤–µ–Ω–∏ –ø–æ–¥–æ–ø—Ü–∏–∏</p>
                                        }
                                    </details>
                                </li>
                            }
                        }
                    </ul>
                </div>
            </div>
        </form>
    </div>
</div>

@section Scripts {
    <script src="~/js/menu-item-update.js" asp-append-version="true"></script>
    <script>

        function removeOption(index) {
            alert('–ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –æ–ø—Ü–∏—è ' + index);
        }

        function removeChild(optionIdx, refId) {
            alert(`–ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –ø–æ–¥–≥—Ä—É–ø–∞ ${refId} –æ—Ç –æ–ø—Ü–∏—è ${optionIdx}`);
        }

        function removeSet(optionIdx, setName) {
            alert(`–ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –∫–æ–º–ø–ª–µ–∫—Ç '${setName}' –æ—Ç –æ–ø—Ü–∏—è ${optionIdx}`);
        }

        function removeSetItem(optionIdx, setName, itemId) {
            alert(`–ü—Ä–µ–º–∞—Ö–≤–∞–Ω–µ –Ω–∞ –µ–ª–µ–º–µ–Ω—Ç ${itemId} –æ—Ç –∫–æ–º–ø–ª–µ–∫—Ç '${setName}' –≤ –æ–ø—Ü–∏—è ${optionIdx}`);
        }


    </script>
}
