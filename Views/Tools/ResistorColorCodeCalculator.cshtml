@model List<EMatrix.ViewModels.Services.ResistorBandModel>

<link rel="stylesheet" href="~/css/resistor-calculator-customization.css" asp-append-version="true"/>

<div class="tabs-container mt-4">
    <!-- Tabs -->
    <ul class="nav nav-tabs" role="tablist">
        <li class="nav-item" role="presentation">
            <a class="tab-link active" id="3-band" data-bs-toggle="tab" href="#three" role="tab"
               aria-controls="three" aria-selected="true">3 ленти</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="tab-link" id="4-band" data-bs-toggle="tab" href="#four" role="tab"
               aria-controls="four" aria-selected="false">4 ленти</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="tab-link" id="5-band" data-bs-toggle="tab" href="#five" role="tab"
               aria-controls="five" aria-selected="false">5 ленти</a>
        </li>
        <li class="nav-item" role="presentation">
            <a class="tab-link" id="6-band" data-bs-toggle="tab" href="#six"
               role="tab"
               aria-controls="six" aria-selected="false">6 ленти</a>
        </li>
    </ul>
</div>
<!-- Tab Content -->
<div class="tab-content">
    <div class="tab-pane fade show active" id="three" role="tabpanel" aria-labelledby="3-band">
        <div class="resistor-values mt-3">
            <input id="resistance-3" class="form-control mb-2" placeholder="Съпротивление (Ω)" />

            <input id="minimum-3" class="form-control mb-2" placeholder="Минимална стойност (Ω)" />

            <input id="maximum-3" class="form-control mb-2" placeholder="Максимална стойност (Ω)" />
        </div>
        <table class="table table-bordered">
            <thead>
            <tr>
                <th>Цвят</th>
                <th>Първа</th>
                <th>Втора</th>
                <th>x &#8486;</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var color in Model)
            {
                <tr>
                    <td class="@color.Class">@color.Color</td>
                    @if (color.FirstDigit != null)
                    {
                        <td><button value="@color.FirstDigit">@color.FirstDigit</button></td>
                    }
                    else
                    {
                        <td></td>
                    }
                    @if (color.SecondDigit != null)
                    {
                        <td><button value="@color.SecondDigit">@color.SecondDigit</button></td>
                    }
                    else
                    {
                        <td></td>
                    }
                    @{
                        var exponent = (int)Math.Log10(color.Multiplier.Value);
                        var displayMultiplier = $"10<sup>{exponent}</sup>";
                        <td><button value="@color.Multiplier">x @Html.Raw(displayMultiplier)</button></td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
    <div class="tab-pane fade" id="four" role="tabpanel" aria-labelledby="4-band">
        <div class="resistor-values mt-3">
            <input id="resistance-4" class="form-control mb-2" placeholder="Съпротивление (Ω)" />

            <input id="tolerance-4" class="form-control mb-2" placeholder="Толеранс (%)" />

            <input id="minimum-4" class="form-control mb-2" placeholder="Минимална стойност (Ω)" />

            <input id="maximum-4" class="form-control mb-2" placeholder="Максимална стойност (Ω)" />
        </div>
        <table class="table table-bordered">
            <thead>
            <tr>
                <th>Цвят</th>
                <th>Първа</th>
                <th>Втора</th>
                <th>x &#8486;</th>
                <th>Толеранс</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var color in Model)
            {
                <tr>
                    <td class="@color.Class">@color.Color</td>
                    @if (color.FirstDigit != null)
                    {
                        <td><button value="@color.FirstDigit">@color.FirstDigit</button></td>
                    }
                    else
                    {
                        <td></td>
                    }
                    @if (color.SecondDigit != null)
                    {
                        <td><button value="@color.SecondDigit">@color.SecondDigit</button></td>
                    }
                    else
                    {
                        <td></td>
                    }
                    @{
                        var exponent = (int)Math.Log10(color.Multiplier.Value);
                        var displayMultiplier = $"10<sup>{exponent}</sup>";
                        <td><button value="@color.Multiplier">x @Html.Raw(displayMultiplier)</button></td>
                    }
                    @if (color.Tolerance != null)
                    {
                        <td><button onclick="setTolerance(this, 4)" value="@color.Tolerance%">&#177;@color.Tolerance%</button></td>
                    }
                    else
                    {
                        <td></td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
    <div class="tab-pane fade" id="five" role="tabpanel" aria-labelledby="5-band">
        <div class="resistor-values mt-3">
            <input id="resistance-5" class="form-control mb-2" placeholder="Съпротивление (Ω)" />

            <input id="tolerance-5" class="form-control mb-2" placeholder="Толеранс (%)" />

            <input id="minimum-5" class="form-control mb-2" placeholder="Минимална стойност (Ω)" />

            <input id="maximum-5" class="form-control mb-2" placeholder="Максимална стойност (Ω)" />
        </div>
        <table class="table table-bordered">
            <thead>
            <tr>
                <th>Цвят</th>
                <th>Първа</th>
                <th>Втора</th>
                <th>Трета</th>
                <th>x &#8486;</th>
                <th>Толеранс</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var color in Model)
            {
                <tr>
                    <td class="@color.Class">@color.Color</td>
                    @if (color.FirstDigit != null)
                    {
                        <td><button value="@color.FirstDigit">@color.FirstDigit</button></td>
                    }
                    else
                    {
                        <td></td>
                    }
                    @if (color.SecondDigit != null)
                    {
                        <td><button value="@color.SecondDigit">@color.SecondDigit</button></td>
                    }
                    else
                    {
                        <td></td>
                    }
                    @if (color.ThirdDigit != null)
                    {
                        <td><button value="@color.ThirdDigit">@color.ThirdDigit</button></td>
                    }
                    else
                    {
                        <td></td>
                    }
                    @{
                        var exponent = (int)Math.Log10(color.Multiplier.Value);
                        var displayMultiplier = $"10<sup>{exponent}</sup>";
                        <td><button value="@color.Multiplier">x @Html.Raw(displayMultiplier)</button></td>
                    }
                    @if (color.Tolerance != null)
                    {
                        <td><button onclick="setTolerance(this, 5)" value="@color.Tolerance%">&#177;@color.Tolerance%</button></td>
                    }
                    else
                    {
                        <td></td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
    <div class="tab-pane fade" id="six" role="tabpanel" aria-labelledby="6-band">
        <div class="resistor-values mt-3">
            <input id="resistance-6" class="form-control mb-2" placeholder="Съпротивление (Ω)" />

            <input id="tolerance-6" class="form-control mb-2" placeholder="Толеранс (%)" />

            <input id="minimum-6" class="form-control mb-2" placeholder="Минимална стойност (Ω)" />

            <input id="maximum-6" class="form-control mb-2" placeholder="Максимална стойност (Ω)" />

            <input id="tempcoef-6" class="form-control mb-2" placeholder="Темп. коефициент (ppm/°C)" />
        </div>

        <table class="table table-bordered">
            <thead>
            <tr>
                <th>Цвят</th>
                <th>Първа</th>
                <th>Втора</th>
                <th>Трета</th>
                <th>x &#8486;</th>
                <th>Толеранс</th>
                <th>Темп. коеф.(ppm/°C)</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var color in Model)
            {
                <tr>
                    <td class="@color.Class">@color.Color</td>
                    @if (color.FirstDigit != null)
                    {
                        <td><button value="@color.FirstDigit">@color.FirstDigit</button></td>
                    }
                    else
                    {
                        <td></td>
                    }
                    @if (color.SecondDigit != null)
                    {
                        <td><button value="@color.SecondDigit">@color.SecondDigit</button></td>
                    }
                    else
                    {
                        <td></td>
                    }
                    @if (color.ThirdDigit != null)
                    {
                        <td><button value="@color.ThirdDigit">@color.ThirdDigit</button></td>
                    }
                    else
                    {
                        <td></td>
                    }
                    @{
                        var exponent = (int)Math.Log10(color.Multiplier.Value);
                        var displayMultiplier = $"10<sup>{exponent}</sup>";
                        <td><button value="@color.Multiplier">x @Html.Raw(displayMultiplier)</button></td>
                    }
                    @if (color.Tolerance != null)
                    {
                        <td><button onclick="setTolerance(this, 6)" value="@color.Tolerance%">&#177;@color.Tolerance%</button></td>
                    }
                    else
                    {
                        <td></td>
                    }
                    @if (color.TempCoefficient != null)
                    {
                        <td><button class="tempCoefficient" onclick="setTempCoef(this)" value="&#177;@color.TempCoefficient">&#177;@color.TempCoefficient</button></td>
                    }
                    else
                    {
                        <td></td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
</div>

@section Scripts
{
    <script>
        function setTolerance(button, index){
            let input = document.getElementById(`tolerance-${index}`);
            input.value = button.value;
            document.querySelectorAll(`#tolerance-${index}`).forEach(button => {
                button.classList.remove('active')
            })
            button.classList.add('active');
        }
        function setTempCoef(button){
            let input = document.getElementById(`tempcoef-6`);
            input.value = button.value;
            document.querySelectorAll('.tempCoefficient').forEach(button => {
                button.classList.remove('active')
            })
            button.classList.add('active');
        }

    </script>
    <script>
        document.addEventListener("DOMContentLoaded", function () {
            // Attach click handler to all tables
            ['#three', '#four', '#five', '#six'].forEach((tabId, i) => {
                const tabContent = document.querySelector(tabId);
                const table = tabContent.querySelector('table');

                table.addEventListener('click', function (e) {
                    const button = e.target.closest("button");
                    if (!button) return;

                    // Remove active from any other button in the same cell (column-wise)
                    const td = button.closest("td");
                    const cellIndex = Array.from(td.parentNode.children).indexOf(td);

                    table.querySelectorAll(`tbody tr td:nth-child(${cellIndex + 1}) button.active`)
                        .forEach(btn => btn.classList.remove("active"));

                    button.classList.add("active");

                    // Calculate resistance after selection
                    const index = i + 3; // maps to 3, 4, 5, 6
                    updateResistanceFromTable(tabContent, index);
                });
            });

            function updateResistanceFromTable(tabContent, index) {
                const resistanceInput = document.getElementById(`resistance-${index}`);
                const minInput = document.getElementById(`minimum-${index}`);
                const maxInput = document.getElementById(`maximum-${index}`);
                const tolInput = document.getElementById(`tolerance-${index}`);

                let tolerance = tolInput?.value ? parseFloat(tolInput.value) : null;
                if(index === 3){
                    tolerance = 20;
                }

                const columnIndexes = index >= 5 ? [1, 2, 3, 4] : [1, 2, 3];
                const activeButtons = getActiveButtonsByColumn(tabContent, columnIndexes);

                const isFiveOrSixBand = index >= 5;

                // Not enough data yet
                if ((!isFiveOrSixBand && activeButtons.length < 3) ||
                    (isFiveOrSixBand && activeButtons.length < 4)) {
                    resistanceInput.value = '';
                    minInput.value = '';
                    maxInput.value = '';
                    return;
                }

                const digits = Array.from(activeButtons)
                    .slice(0, isFiveOrSixBand ? 3 : 2)
                    .map(btn => btn.value)
                    .join('');

                const multiplier = parseFloat(activeButtons[isFiveOrSixBand ? 3 : 2].value);
                const resistance = parseInt(digits) * multiplier;

                resistanceInput.value = formatResistance(resistance);

                if (tolerance != null && !isNaN(tolerance)) {
                    const min = resistance * (1 - tolerance / 100.00);
                    const max = resistance * (1 + tolerance / 100.00);
                    minInput.value = formatResistance(min);
                    maxInput.value = formatResistance(max);
                } else {
                    minInput.value = '';
                    maxInput.value = '';
                }
            }

            function formatResistance(value) {
                let formatted = '';
                if (value >= 1_000_000_000) {
                    formatted = (value / 1_000_000_000).toFixed(2) + ' GΩ';
                } else if (value >= 1_000_000) {
                    formatted = (value / 1_000_000).toFixed(2) + ' MΩ';
                } else if (value >= 1_000) {
                    formatted = (value / 1_000).toFixed(2) + ' kΩ';
                } else {
                    formatted = value.toFixed(2) + ' Ω';
                }

                // Replace dot with comma for Bulgarian-style decimal separator
                return formatted.replace('.', ',');
            }


            function getActiveButtonsByColumn(tabContent, columnIndexes) {
                const activeButtons = [];

                columnIndexes.forEach(index => {
                    const rows = tabContent.querySelectorAll('tbody tr');
                    for (let row of rows) {
                        const cell = row.querySelectorAll('td')[index];
                        if (!cell) continue;
                        const btn = cell.querySelector('button.active');
                        if (btn) {
                            activeButtons.push(btn);
                            break; // take only the first active button in this column
                        }
                    }
                });

                return activeButtons;
            }

        });
    </script>

}
